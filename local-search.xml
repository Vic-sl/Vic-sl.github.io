<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode 热题 100记录</title>
    <link href="/2024/12/26/LeetCode-%E7%83%AD%E9%A2%98-100%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/12/26/LeetCode-%E7%83%AD%E9%A2%98-100%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-两数之和">1. 两数之和</h3><h4 id="题目">题目</h4><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><h4 id="我的题解">我的题解</h4><p>将给定数组设置为一个哈希表，其中数字为关键字，对应在数组中的下标为键值。使用C语言的哈希库–<code>uthash</code>，来实现哈希表的创建以及对应操作。在处理函数中，遍历数组元素，在哈希表中查找<code>target - nums[i]</code>，如果不在，则将数组元素添加进哈希表。</p><h4 id="不足之处">不足之处</h4><p>待处理数组如果太大可能导致哈希表过大，造成内存溢出问题。</p><h4 id="优秀题解">优秀题解</h4><p>使用结构体保存数字对应下标，将数字排序后，设定两个指针，一个指向第一个元素，一个指向最后一个元素，头指针向后移动，移动条件为头指针值小于<code>target - 尾指针此时指向的值</code>，如果不小于则尾指针向前移动，移动条件为头指针值大于<code>target - 尾指针此时指向的值</code>。该题解避免了使用哈希表的额外内存开销和寻找所需时间。</p><h3 id="49-字母异位词分组">49. 字母异位词分组</h3><h4 id="题目-2">题目</h4><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><h4 id="我的题解-2">我的题解</h4><p>设定一个哈希表，其中字符串作为关键字，还包含字母相同字符串的下标数组，返回数组长度，该字母相同字符串个数。遍历字符串数组，将字符串进行排序，对排序后的字符串进行判断，在哈希表中则将下标记录进对应相同字母位置的下标数组中，不在则将排序后的字符串添加进哈希表中，并将返回数组长度加一。也就是将所有字符串进行排序，字母异位词排序后是相等的，当排序后的字符串不在哈希表中时，意味着这是一个新的字母异位词，需要将返回列表长度加一，同时将该字母组合下的数量加一。</p><h3 id="128-最长连续序列">128. 最长连续序列</h3><h4 id="题目-3">题目</h4><p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><h4 id="我的题解-3">我的题解</h4><p>使用哈希表设定一个<code>Set</code>数据结构，去除掉数组中重复的数字。遍历数组，如果找到<code>nums[i] - 1</code>，则开始往后找，并同时修改标志位。</p><h4 id="不足之处-2">不足之处</h4><p>执行时间不定，并且高达200多ms；在数组大时，定义哈希表需要很大的额外内存空间。</p><h4 id="优秀题解-2">优秀题解</h4><p>遍历数组找到最大值和最小值，再遍历数组生成一个布尔数组的哈希表，再遍历数组，分别向前向后遍历，找到当前数字的最长序列长度，同时修改每个访问过的数字对应布尔数组参数。</p><h3 id="283-移动零">283. 移动零</h3><h4 id="题目-4">题目</h4><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><h4 id="我的题解-4">我的题解</h4><p>设定一个指针<code>pos</code>，循环数组，将不是<code>0</code>的数字移动至<code>pos</code>处，并将<code>pos</code>往后移动一位。最后再从<code>pos</code>处起的后续所有位置置零。</p><h3 id="11-盛最多水的容器">11. 盛最多水的容器</h3><h4 id="题目-5">题目</h4><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><h4 id="我的题解-5">我的题解</h4><p>使用双指针，分别从头尾往中间遍历，条件为相互比较，较小的移动，每次移动后计算容器水量。</p><h3 id="15-三数之和">15. 三数之和</h3><h4 id="题目-6">题目</h4><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p><p>**注意：**答案中不可以包含重复的三元组。</p><h4 id="我的题解-6">我的题解</h4><p>将数组排序后，循环遍历数组，设定两个指针，一个指向<code>i + 1</code>，另一个指向数组尾部。判断三数之和与<code>0</code>的关系，大于则移动<code>right</code>，小于则移动<code>left</code>，等于则添加进返回数组中。注意对三元数组的去重，解决<code>a</code>的去重方法为判断<code>nums[i] ? nums[i-1]</code>，<code>b</code>和<code>c</code>的去重需在添加数组后执行，为避免没有添加到返回数组中就开始去重了。<code>b</code>和<code>c</code>去重是和下一个进行比较，<code>a</code>的去重是和前一个进行比较。</p><h3 id="42-接雨水">42. 接雨水</h3><h4 id="题目-7">题目</h4><p>给定 <code>n</code> 个非负整数表示每个宽为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p>当然可以！双指针法的核心思想是利用 <strong>左右两端的指针</strong> 和 <strong>左右最高高度的约束</strong> 来逐步缩小问题范围并计算积水量。下面是详细的解释。</p><h4 id="问题本质">问题本质</h4><p>在“接雨水”问题中，柱子的高度数组 <code>height</code> 可以看作是一系列挡水的墙，而每个位置能够接的水量由以下公式决定：</p><p><strong>某位置的积水量 = min(左边最高柱子高度, 右边最高柱子高度) - 当前柱子高度</strong></p><h4 id="收集题解">收集题解</h4><p>方法一：动态规划</p><p>对于下标<code>i</code>，下雨后水能到达的最大高度等于下标<code>i</code>两边的最大高度的最小值，下标<code>i</code>处能接的雨水量等于下标<code>i</code>处的水能到达的最大高度减去<code>height[i]</code>。</p><p>朴素的做法是对于数组<code>height</code>中的每个元素，分别向左和向右扫描并记录左边和右边的最大高度，然后计算每个下标位置能接的雨水量。假设数组<code>height</code>的长度为<code>n</code>，该做法需要对每个下标位置使用<code>O(n)</code>的时间向两边扫描并得到最大高度，因此总时间复杂度是<code>O(n^2^)</code>。</p><p>上述做法的时间复杂度较高是因为需要对每个下标位置都向两边扫描。如果已经知道每个位置两边的最大高度，则可以在<code>O(n)</code>的时间内得到能接的雨水总量。使用动态规划的方法，可以在<code>O(n)</code>的时间内预处理得到每个位置两边的最大高度。</p><p>创建两个长度为<code>n</code>的数组<code>leftMax</code>和<code>rightMax</code>。对于<code>0≤i&lt;n</code>，<code>leftMax[i]</code>表示下标<code>i</code>及其左边的位置中，<code>height</code>的最大高度，<code>rightMax[i]</code>表示下标<code>i</code>及其右边的位置中，`height的最大高度。</p><p>显然，<code>leftMax[0]=height[0]</code>，<code>rightMax[n−1]=height[n−1]</code>。两个数组的其余元素的计算如下：</p><p>当<code>1≤i≤n−1</code>时，<code>leftMax[i]=max(leftMax[i−1],height[i]);</code></p><p>当<code>0≤i≤n−2</code>时，<code>rightMax[i]=max(rightMax[i+1],height[i])</code>。</p><p>因此可以正向遍历数组<code>height</code>得到数组<code>leftMax</code>的每个元素值，反向遍历数组<code>height</code>得到数组<code>rightMax</code>的每个元素值。</p><p>在得到数组<code>leftMax</code>和<code>rightMax</code>的每个元素值之后，对于<code>0≤i&lt;n</code>，下标 i 处能接的雨水量等于 <code>min(leftMax[i],rightMax[i])−height[i]</code>。遍历每个下标位置即可得到能接的雨水总量。</p><p>时间复杂度为<code>O(n)</code>，空间复杂度为<code>O(n)</code>。</p><p>方法二：双指针</p><p>双指针法核心逻辑</p><ol><li class="lvl-3"><p>我们需要同时知道每个位置的左边最高柱子高度和右边最高柱子高度。</p></li><li class="lvl-3"><p>如果从左向右逐一计算左边最高高度，从右向左逐一计算右边最高高度，效率低下。</p></li><li class="lvl-3"><p><strong>双指针法</strong> 则通过维护左右两边的最高柱子高度，快速得出答案，避免重复计算。</p></li></ol><p>注意到下标<code>i</code>处能接的雨水量由<code>leftMax[i]</code>和<code>rightMax[i]</code>中的最小值决定。由于数组<code>leftMax</code>是从左往右计算，数组<code>rightMax</code>是从右往左计算，因此可以使用双指针和两个变量代替两个数组。</p><p>维护两个指针<code>left</code>和<code>right</code>，以及两个变量<code>leftMax</code>和<code>rightMax</code>，初始时 <code>left=0,right=n−1,leftMax=0,rightMax=0</code>。指针 left 只会向右移动，指针<code>right</code>只会向左移动，在移动指针的过程中维护两个变量<code>leftMax</code>和<code>rightMax</code>的值。</p><p>当两个指针没有相遇时，进行如下操作：</p><p>使用<code>height[left]</code>和<code>height[right]</code>的值更新<code>leftMax</code>和<code>rightMax</code>的值；</p><p>如果<code>height[left]&lt;height[right]</code>，则必有<code>leftMax&lt;rightMax</code>，下标<code>left</code>处能接的雨水量等于 <code>leftMax−height[left]</code>，将下标<code>left</code>处能接的雨水量加到能接的雨水总量，然后将<code>left</code>加<code>1</code>（即向右移动一位）；</p><p>如果<code>height[left]≥height[right]</code>，则必有<code>leftMax≥rightMax</code>，下标<code>right</code>处能接的雨水量等于 <code>rightMax−height[right]</code>，将下标<code>right</code>处能接的雨水量加到能接的雨水总量，然后将<code>right</code>减<code>1</code>（即向左移动一位）。</p><p>当两个指针相遇时，即可得到能接的雨水总量。</p><p>时间复杂度为<code>O(n)</code>，空间复杂度为<code>O(1)</code>。</p><p>双指针法可的判断将<code>height[left]&lt;height[right]</code>更换为<code>leftMax&lt;rightMax</code>更容易理解。因为双指针法是解决动态规划问题中空间复杂度问题，用双指针和两个最大值替换掉两个数组。<strong>双指针法</strong> 的核心是通过维护左右两边的最高高度，动态计算当前指针处的积水量，并根据两边的高度关系决定指针的移动方向。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>笔记</tag>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记-(FreeRTOS)</title>
    <link href="/2022/12/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-FreeRTOS/"/>
    <url>/2022/12/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-FreeRTOS/</url>
    
    <content type="html"><![CDATA[<h1>学习笔记（基于ESP32的FreeRTOS）</h1><p>基于ESP32的FreeRTOS，参考ESP32官方的ESP-IDF开发，目的为使用FreeRTOS管理任务，实现FOC算法控制，本文为学习FreeRTOS所记录笔记。</p><span id="more"></span><h2 id="Day1-2022-12-05">Day1 (2022-12-05)</h2><p>基础头文件：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sdkconfig.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_system.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spi_flash_mmap.h&quot;</span></span></code></pre></div><h3 id="Task-API-任务">Task API(任务)</h3><p>所需基本头文件：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FreeRTOS.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;task.h&quot;</span></span></code></pre></div><ol><li class="lvl-3"><h4 id="任务的创建">任务的创建</h4><p>  在app_main()中使用<code>xTaskCreate(任务函数名字, 任务名字, 堆栈的大小, 传入参数, 任务优先级, 任务句柄)</code>创建任务。其中任务句柄为<code>TaskHandle_t</code>类型。</p><p><code>Example</code></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;xTaskCreate(myTask, <span class="hljs-string">&quot;myTask&quot;</span>, <span class="hljs-number">1024</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>);&#125;</code></pre></div></li><li class="lvl-3"><h4 id="任务的结束">任务的结束</h4><p>  在任务函数中使用<code>vTaskDelete(NULL)</code>结束任务，在app_main()中使用<code>vTakeDelete(任务句柄)</code>结束任务。</p><p><code>Example</code></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//在任务函数中</span><span class="hljs-type">void</span> <span class="hljs-title function_">myTask</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParam)</span>&#123;    vTaskDelete(<span class="hljs-literal">NULL</span>);&#125;<span class="hljs-comment">//在app_main函数中</span><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    TaskHandle_t myTaskHandle = <span class="hljs-literal">NULL</span>;    myTaskHandle = xTaskCreate(myTask, <span class="hljs-string">&quot;myTask&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>);    vTaskDelete(myTaskHandle);&#125;</code></pre></div></li><li class="lvl-3"><h4 id="任务优先级">任务优先级</h4><ol><li class="lvl-6">同一优先级的任务按照先创建先运行的原则进行，不同优先级则为优先级大先运行，esp-idf默认最大优先级为24，可在<code>esp-idf\components\freertos\esp_additions\include\freertos\FreeRTOSConfig.h</code>文件中修改<code>configMAX_PRIORITIES</code>的设定值改变其最大优先级。</li><li class="lvl-6">获取任务优先级，使用<code>uxTaskPriorityGet(任务句柄)</code>获得任务优先级，定义一个<code>UBaseType_t</code>类型变量来存储任务的优先级，其本质是<code>unsigned int</code>类型。</li><li class="lvl-6">修改任务优先级，使用<code>vTaskPrioritySet(任务句柄, 修改的任务优先级)</code>修改任务优先级。</li></ol><p><code>Example</code></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    UBaseType_t priority;    TaskHandle_t myTaskHandle = <span class="hljs-literal">NULL</span>;    myTaskHandle = xTaskCreate(myTask, <span class="hljs-string">&quot;myTask&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>);    priority = uxTaskPriorityGet(myTaskHandle);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;myTask priority is %d.\n&quot;</span>, priority);    vTaskPrioritySet(myTaskHandle, <span class="hljs-number">2</span>);    priority = uxTaskPriorityGet(myTaskHandle);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;myTask new priority is %d.\n&quot;</span>, priority);&#125;</code></pre></div></li><li class="lvl-3"><h4 id="任务的挂起（暂停）">任务的挂起（暂停）</h4><p>  使用<code>vTaskSuspend(NULL)</code>在任务函数中挂起自己，使用<code>vTaskSuspend(任务句柄)</code>挂起指定任务。</p></li><li class="lvl-3"><h4 id="任务的恢复">任务的恢复</h4><ol><li class="lvl-6">使用<code>vTaskResume(任务句柄)</code>恢复任务，使任务继续执行。</li><li class="lvl-6">在任务函数中使用<code>vTaskSuspendAll()</code>会使CPU只执行任务函数中的后续代码，其他任务将会被挂起，在使用<code>vTaskResumeAll()</code>后，其他任务才能继续执行。但是，在使用<code>vTaskSuspendAll()</code>时中断仍处于启用状态。</li></ol></li><li class="lvl-3"><h4 id="获取任务信息">获取任务信息</h4><p>  使用<code>vTaskList()</code>打印系统任务信息，包括任务名字、运行状态、任务优先级、使用堆栈大小、任务编号。需定义一个<code>static char</code>类型变量存储任务信息。但在单片机寸金寸土的内存里面，使用<code>vTaskLinst()</code>会占用很大的内存，一般不使用这个函数获取任务信息。</p><p>  取而代之在FreeRTOS中常用查看任务所用栈的函数为<code>uTaskGetStackHighWaterMark()</code>，用于获取任务剩余栈的程度。在FreeRTOS中每个任务维护自己的堆栈，总堆栈大小在创建任务时指定。该函数所返回类型为<code>UBaseType_t</code>。</p></li></ol><h2 id="Day2-2022-12-07">Day2 (2022-12-07)</h2><h3 id="Task-API-任务-2">Task API(任务)</h3><ol><li class="lvl-3"><h4 id="Watchdogs-看门狗">Watchdogs(看门狗)</h4><p>  ESP-IDF支持两种看门狗计时器，中断看门狗计时器(Interrupt Watchdog Timer (IWDT))与任务看门狗计时器(Task Watchdog Timer (TWDT))，中断看门狗在后面学习中断时使用。</p><p> 任务看门狗的使用</p><ul class="lvl-2"><li class="lvl-5"><p><code>esp_task_wdt_init()</code>：初始化TWDT并且订阅<code>idle</code>任务。</p></li><li class="lvl-5"><p><code>esp_task_wdt_add(TaskHandle_t task_handle)</code>：给任务添加看门狗，若在任务内部则<code>task_handle</code>为NULL。</p></li><li class="lvl-5"><p><code>esp_task_wdt_reset()</code>：‘喂狗’，在给任务添加看门狗后一段时间要调用该函数’feed TWDT’，否则看门狗会报错，‘一段时间’在ESP-IDF的配置文件中设置。</p></li><li class="lvl-5"><p><code>esp_task_wdt_delete(TaskHandle_t task_handle)</code>：删除任务的看门狗。</p></li></ul><p><code>Example</code></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> esp_task_wdt.h</span><span class="hljs-type">void</span> <span class="hljs-title function_">myTask</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParam)</span>&#123;    esp_task_wdt_add(<span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)    &#123;        <span class="hljs-comment">/* code */</span>        esp_task_reset();    &#125;&#125;</code></pre></div></li></ol><h2 id="Day3-2022-12-08">Day3 (2022-12-08)</h2><h3 id="Queue-API-队列">Queue API(队列)</h3><p>所需基本头文件：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FreeRTOS.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;queue.h&quot;</span></span></code></pre></div><ol><li class="lvl-3"><h4 id="队列的创建">队列的创建</h4><p>  使用<code>xQueueCreate(UBaseype_t uxQueueLength, UBaseType_t uxItemSize)</code>创建一个新队列返回一个队列句柄，可通过调用该句柄可引用该队列。<code>uxQueueLength</code>为队列最大容纳项目数，<code>uxItemSize</code>为存储在队列中每个数据项的大小，单位为字节(bytes)。</p><p>  其返回值若为<code>NULL</code>则创建队列失败，因为没有足够的堆内存分配队列数据结构和存储区域，若成功创建队列返回值则为队列的句柄，可通过它引用创建的队列。</p><p>  队列用来在任务与任务、任务与中断中传输数据，可以在调度程序开始前或开始后创建。</p><p>将创建好的队列句柄作为<code>Task</code>(任务)的传入参数。</p></li><li class="lvl-3"><h4 id="数据的发送">数据的发送</h4><p>  使用<code>xQueueSend(QueueHandle xQueue, const void * pvItemToQueue, TickType_t xTicksToWait)</code>发送数据到队列中，<code>xQueue</code>为队列句柄，<code>pvItemToQueue</code>为指向传输数据的指针，数据会被复制到队列存储中，<code>xTicksToWait</code>为等待超时时间。</p><p>  其返回值若为<code>pdPASS</code>则发送数据成功，若返回<code>errQUEUE_FULL</code>则发送失败。</p></li><li class="lvl-3"><h4 id="数据的接收">数据的接收</h4><p>  使用<code>xQueueReceive(QueueHandle xQueue, void *pvBuffer, TickType_t xTicksToWait)</code>接收队列的数据，<code>xQueue</code>为队列句柄，<code>pvBuffer</code>为指向接收数据将复制到其中的存储器的指针，<code>xTicksTowait</code>为等待超时时间。</p><p>  其返回值为<code>pdPASS</code>则接收数据成功，若返回<code>errQUEUE_EMPTY</code>则接收数据失败。</p><p>将<code>xTicksTowait</code>设置为<code>portMAX_DELAY</code>则接收任务函数会等待队列有数据后再执行后续代码，使用<code>portMAX_DELAY</code>可以不在接收循环最后添加延时函数，任务会在接收出处等待队列中出现数据。</p><h4 id="Note">Note</h4><p>  在写发送接收数据代码时用到了<code>malloc()</code>与<code>free()</code>申请和释放内存，在发送数据时，需要申请内存进行写入数据操作，申请内存<code>malloc</code>与<code>free()</code>需要同时出现，避免内存溢出，在发送数据中申请内存是在循环内部进行的，每次发送数据后，在接收数据成功时释放内存，所以需要在发送数据的循环内部进行申请内存，而释放内存则在接收数据成功后释放。关于使用<code>malloc</code>与<code>free</code>在另一篇考研C语言篇（待写）文章中。其队列可传输的数据为整数、字符、结构体等。</p><p><code>Example</code></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//发送任务函数</span><span class="hljs-type">void</span> <span class="hljs-title function_">sendTask1</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParam)</span>&#123;    QueueHandle_t QHandle;    QHandle = (QueueHandle_t)pvParam;    BaseType_t xStatus;    <span class="hljs-type">int</span> i = <span class="hljs-number">111</span>;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;        xStatus = xQueueSend(QHandle, &amp;i, <span class="hljs-number">0</span>);        <span class="hljs-keyword">if</span> (xStatus != pdPASS)        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;send fail\n&quot;</span>);        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;send done\n&quot;</span>);        &#125;        vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);    &#125;&#125;<span class="hljs-comment">//接收任务函数</span><span class="hljs-type">void</span> <span class="hljs-title function_">recTask</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParam)</span>&#123;    QueueHandle_t QHandle;    QHandle = (QueueHandle_t)pvParam;    BaseType_t xStatus;    <span class="hljs-type">int</span> prec;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;        xStatus = xQueueReceive(QHandle, &amp;prec, portMAX_DELAY);        <span class="hljs-keyword">if</span> (xStatus != pdPASS)        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;rec fail\n&quot;</span>);        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;rec successful %d\n&quot;</span>, prec);        &#125;    &#125;&#125;<span class="hljs-comment">//主函数</span><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    QueueHandle_t QHandle;    QHandle = xQueueCreate(<span class="hljs-number">5</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));    <span class="hljs-keyword">if</span> (QHandle != <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Creat queue successful!\n&quot;</span>);        xTaskCreate(sendTask, <span class="hljs-string">&quot;sendTask&quot;</span>, <span class="hljs-number">1024</span> * <span class="hljs-number">6</span>, (<span class="hljs-type">void</span> *)QHandle, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>);        xTaskCreate(recTask, <span class="hljs-string">&quot;recTask&quot;</span>, <span class="hljs-number">1024</span> * <span class="hljs-number">6</span>, (<span class="hljs-type">void</span> *)QHandle, <span class="hljs-number">3</span>, <span class="hljs-literal">NULL</span>);    &#125;    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Creat queue fail!\n&quot;</span>);    &#125;&#125;</code></pre></div></li></ol><h2 id="Day4-2022-12-13">Day4 (2022-12-13)</h2><h3 id="控制GPIO输出">控制GPIO输出</h3><p>所需基本头文件：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/gpio.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp32/rom/ets_sys.h&quot;</span></span></code></pre></div><ol><li class="lvl-3"><h4 id="ESP32-GPIO基础信息">ESP32 GPIO基础信息</h4><p>  ESP32基础引脚有<code>0~39</code>，其中<code>34~39</code>为仅输入引脚，因其内部没有上拉或下拉电阻，所以不能用作输出，只能用作输入；其余引脚功能根据具体芯片手册查询。</p></li><li class="lvl-3"><h4 id="初始化GPIO">初始化GPIO</h4><p>  在笔者使用中，初始化GPIO口使用其他例子中的<code>gpio_pad_select_gpio(gpio_num)</code>编译时报错，经过编译器提醒，换成了使用<code>esp_rom_gpio_select_gpio(gpio_num)</code>进行初始化引脚，其中引脚通过查询芯片手册或者<code>ESP-IDF</code>确定。</p></li><li class="lvl-3"><h4 id="设置GPIO模式">设置GPIO模式</h4><p>使用<code>gpio_set_direction(gpio_num, 引脚模式)</code>设置引脚模式，其中引脚模式有以下几种:</p><ul class="lvl-2"><li class="lvl-5"><p><code>GPIO_MODE_DISABLE</code>：禁用输入和输出模式；</p></li><li class="lvl-5"><p><code>GPIO_MODE_INPUT</code>：仅输入模式；</p></li><li class="lvl-5"><p><code>GPIO_MODE_OUTPUT</code>：仅输出模式；</p></li><li class="lvl-5"><p><code>GPIO_MODE_INPUT_OUTPUT</code>：输出和输入模式；</p></li><li class="lvl-5"><p><code>GPIO_MODEOUTPUT_OD</code>：仅在漏极开路模式下输出模式；</p></li><li class="lvl-5"><p><code>GPIO_MODE_INPUT_OUTPUT_OD</code>：仅在漏极开路模式下输入和输出模式；</p></li></ul></li><li class="lvl-3"><h4 id="设置GPIO输出电平">设置GPIO输出电平</h4><p>  使用<code>gpio_set_level(gpio_num, 输出电平)</code>设置GPIO输出电平，其中输出电平<code>0</code>代表低电平，<code>1</code>代表高电平。</p></li><li class="lvl-3"><h4 id="获取GPIO输入电平">获取GPIO输入电平</h4><p>  使用<code>gpio_get_level(gpio_num)</code>获取GPIO输入电平，例如：如果要获取<code>GPIO16</code>的逻辑电平，<code>gpio_num</code>应为<code>GPIO_NUM_16(16)</code>。</p></li><li class="lvl-3"><h4 id="设置GPIO电阻器状态">设置GPIO电阻器状态</h4><p>  使用<code>gpio_set_pull_mode(gpio_num, 电阻器状态)</code>设置GPIO电阻器状态，其中电阻器状态有以下几种：</p><ul class="lvl-2"><li class="lvl-5"><p><code>GPIO_PULLUP_ONLY</code>：仅上拉模式；</p></li><li class="lvl-5"><p><code>GPIO_PULLDOWN_ONLY</code>：仅下拉模式；</p></li><li class="lvl-5"><p><code>GPIO_PULLUP_PULLDOWN</code>：上拉+下拉模式；</p></li><li class="lvl-5"><p><code>GPIO_FLOATING</code>：不确定模式；</p></li></ul><h4 id="Note-2">Note</h4><p>  在购买逻辑分析仪后，想要通过简单设置开发板交替输出高低电平输出简单的PWM信号，在使用<code>vTaskDelay()</code>进行延时发现其设置在<code>10~19ms</code>之间时，只能输出10ms的波形，设置低于10ms其延时无效，在搜寻解决方法时，发现微妙级别的延时函数，其在<code>esp_rom_sys.h</code>头文件中，导入后使用<code>ets_delay_us()</code>可进行微妙基本的延时，最后通过交替输出高低电平得到周期为20ms的PWM信号，设置其高电平为1ms，既95%占空比，用以控制MG946(360度)舵机以最大速度正方向旋转。在正确连线后，发现舵机并未正常旋转，用手去旋转它发现其处于锁死状态，使用<code>Arduino Mega 2560</code>开发板测试舵机发现其正常，于是将舵机的电源线接入<code>Arduino Mega 2560</code>开发板的5v电压，将ESP32与Arduino开发板在面包板上共地，舵机地线再接入面包板，再次测试发现舵机正常旋转。在测试过程中将各个引脚使用杜邦线接在面包板上更方便使用逻辑分析仪测量其波形，三十元左右的逻辑分析仪能够在初学阶段起到很大的帮助，不用购买昂贵的示波器。</p><p>  在使用<code>ets_delay_us()</code>进行微妙级延时时，发现任务看门狗会报错，其原因可能是延时太短导致没有喂其任务看门狗，但在加入<code>esp_task_wdt_add(NULL)</code>与<code>esp_task_wdt_reset()</code>进行添加任务看门狗与喂狗后，还是会报错；最后找到其解决办法，在创建任务是将其任务优先级改为<code>tskIDLE_PRIORITY</code>后任务看门狗就不报错了。</p><p><code>Example</code></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MY_GPIO GPIO_NUM_19</span><span class="hljs-comment">//输出PWM信号函数</span><span class="hljs-type">void</span> <span class="hljs-title function_">gpio_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParam)</span>&#123;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;        gpio_set_level(GPIO_LED, <span class="hljs-number">1</span>);        ets_delay_us(<span class="hljs-number">1100</span>);        <span class="hljs-comment">// vTaskDelay(1);</span>        gpio_set_level(GPIO_LED, <span class="hljs-number">0</span>);        ets_delay_us(<span class="hljs-number">20000</span> - <span class="hljs-number">1100</span>);        <span class="hljs-comment">// vTaskDelay(19);</span>    &#125;&#125;<span class="hljs-comment">//初始化GPIO函数</span><span class="hljs-type">void</span> <span class="hljs-title function_">GPIO_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    esp_rom_gpio_pad_select_gpio(GPIO_LED);    gpio_set_direction(GPIO_LED, GPIO_MODE_OUTPUT);    gpio_set_level(GPIO_LED, <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">//主函数</span><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    GPIO_Init();    xTaskCreate(gpio_task, <span class="hljs-string">&quot;gpiotask&quot;</span>, <span class="hljs-number">1024</span>, <span class="hljs-literal">NULL</span>, tskIDLE_PRIORITY, <span class="hljs-literal">NULL</span>);&#125;</code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>笔记</tag>
      
      <tag>FreeRTOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习路线指南</title>
    <link href="/2022/11/15/Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2022/11/15/Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="Python学习路线指南">Python学习路线指南</h2><p>  从进入高中以来便开始接触编程世界，先后学习了C语言、Python以及正在学的C++与rust，由于自学没有规划学习路线，走过不少弯路，现编写此文分享经验。本文只代表个人经验之谈，请结合自我实际情况合理规划路线。</p><span id="more"></span><p>本文思维导图</p><p><img src="/img/mdimg/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" alt=""></p><p>Python学习内容</p><p><img src="/img/mdimg/python%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9.png" alt=""></p><h3 id="Python基础学习">Python基础学习</h3><p>  Python被誉为最易入门编程语言之一，其语法也是比较简单易学的，对于学习Python我的建议是选择一本经典书籍快速学习，基础入门不需要深入理解，只需学会使用，在学习基础语法时一定要在自己电脑上编写程序，一开始编写不需要注重代码行数与复杂度，后续第三部分会补充该问题。</p><p>  对于学习所选经典书籍推荐<a href="https://www.code-nav.cn/rd/?rid=cbddf0af6064484f002658102cdbba17">《Python编程：从入门到实践》</a>，这里提供电子版，但建议购买一本实体书籍方便学习，也可以作为后续使用充当字典查询使用。还有一些其他书籍资源，笔者将其放在第四部分。</p><p>  Python基础包括变量、运算符和表达式、流程控制、基础数据结构、函数、面向对象编程、模块、包、异常处理以及文件操作，其中面向对象编程是Python的核心之一，模块化编程与包方便以后大型项目管理，文件操作可以在实际生活中更方便以及更快的解决问题，成为同学眼中的会魔法的人。</p><h3 id="Python进阶学习">Python进阶学习</h3><p>  对于Python进阶内容，是对函数进行进阶学习，以及学习正则表达式和并发编程，其中，函数进阶包括</p><blockquote><p>闭包</p></blockquote><blockquote><p>匿名函数</p></blockquote><blockquote><p>生成器</p></blockquote><blockquote><p>函数装饰器</p></blockquote><blockquote><p>高阶函数</p></blockquote><p>  进一步学习函数会使你的代码更加简洁与规范，摆脱编写稚嫩的代码风格。</p><p>“这个问题怎么解决？”</p><p>“我知道，用正则表达式可以解决。”</p><p>那么你现在有两个问题需要解决了。</p><p>  上述是正则表达式里面一句比较经典的对话，表达了正则表达式的学习难度，正则表达式由于其规则较多且为复杂，要熟练使用只能在编程过程中经常使用查阅，通常的Python书籍都会有一章内容包含正则表达式， 其中会有正则表达的规则表，经常使用即可。</p><p>  并发编程是使用编程充分调用计算机硬件以及计算机网络的高级编程方法，并发编程顾名思义，并行着发生的编程方法，基础编程程序通常只能自上至下的单线程运行，并发编程则可以在需要的时候让不互相影响的两项或多项任务同时发生，也可以将一项较大的任务分为几部分小任务并发运行，通过增加计算机使用资源节约完成任务时间。并发编程能够高效完成任务但也带来了相对应的困难，比如并发编程如何控制各个并行任务的运行时间，如何合理的将大任务分割为能运行的小任务，这只能在实际编程中积累编程经验，没有捷径可走。</p><h3 id="编程进阶必备知识">编程进阶必备知识</h3><p>  当掌握Python基础以及进阶使用后，你可能开始接触到使用编程解决现实问题，比如蓝桥杯比赛以及ACM编程大赛等，这里举蓝桥杯的例子是因为这是笔者进入大学在大一参加的第一个比赛，它开启了笔者的大学比赛经历，在参加蓝桥杯比赛只取得省二后便暴露出笔者野路子出家的缺陷，不懂数据结构，不会使用算法，仅凭单单的简单编程经验不能在比赛中走得更远。</p><p>  想要编程能力更近一步，就要理解一个公式<code>程序 = 数据结构 + 算法</code>，它代表了好代码的结构，将实际问题中的数据转换为编程语言中的对应的数据结构，处理这些数据就是使用合适的算法，两者结合解决实际问题才符合科学的编程。</p><p>  学习数据结构推荐浙大陈越老师的数据结构课程，比较经典但是需要集中精力理解所讲内容，在mooc上可以找到本课程。书籍推荐《大话数据结构》。</p><p>  学习算法建议先将《图解算法》学习后，购买《算法导论》学习，前者漫画风格能够很好的培养学习枯燥的算法的兴趣，后者作为计算机经典书籍之一，称为”算法圣经“。在啃这两本书籍时要多写代码，算法要理解并知道其作用与运行结果，空想需要很强大的想象能力。</p><p>  当你成为一个掌握算法与程序结构的大牛后，学习其他编程语言也非常容易，你已经具备属于自己的编程思想，学习其他语言相当于学习它的语法与核心内容，相信你也有了自己的理解。</p><p>  编写代码对个人来说或许容易，但大型项目往往由团队共同完成，因此，编写易读的代码也成为了一种能力，笔者在此推荐<a href="https://google.github.io/styleguide/pyguide.html">谷歌的Python代码规范</a>，在开始学习编程时就要养成编写易读的代码，谷歌作为龙头企业，其代码规范值得学习。</p><p>于此，你已经看到本文的结尾，Python学习也快靠一段落，欢迎大家与笔者交流学习，作为个人，经验会有不足之处，在学习编程的同时也学习了三维建模软件的使用、单片机以及现代文学，期待和大家进行知识火花的碰撞。</p><p>下面是笔者的收集的部分资源，将其做成导图方便大家查看。</p><h3 id="资源">资源</h3><p>Python常用类库</p><p><img src="/img/mdimg/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93.png" alt=""></p><p>资源</p><p><img src="/img/mdimg/%E8%B5%84%E6%BA%90.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十七届智能车视觉组问题收录</title>
    <link href="/2022/11/13/%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E8%A7%86%E8%A7%89%E7%BB%84%E9%97%AE%E9%A2%98%E6%94%B6%E5%BD%95/"/>
    <url>/2022/11/13/%E5%8D%81%E4%B8%83%E5%B1%8A%E6%99%BA%E8%83%BD%E8%BD%A6%E8%A7%86%E8%A7%89%E7%BB%84%E9%97%AE%E9%A2%98%E6%94%B6%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="十七届智能车视觉组问题收录">十七届智能车视觉组问题收录</h3><p>第一次参加智能车比赛，在做部分机器视觉与结构建模方面的工作时，遇到了许多问题，编写此篇文章记录。</p><span id="more"></span><ol><li class="lvl-3"><p>问题一</p><p>在按照基础教程配置过程中，遇到了一系列问题，主要是CUDA显卡驱动方面问题</p><div class="code-wrapper"><pre><code class="hljs python">问题： keras-nightly 导入包报错 cannot <span class="hljs-keyword">import</span> name <span class="hljs-string">&#x27;Adam&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;keras.optimizers&#x27;</span></code></pre></div><p>报错信息</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> keras.optimizers <span class="hljs-keyword">import</span> AdamImportError: cannot <span class="hljs-keyword">import</span> name <span class="hljs-string">&#x27;Adam&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;keras.optimozers&#x27;</span></code></pre></div><p>解决方案</p><p>将错误使用代码修改：</p>   <div class="code-wrapper"><pre><code class="hljs python">错误代码：<span class="hljs-keyword">from</span> keras.optimizers <span class="hljs-keyword">import</span> Adamopt = Adam(lr=lr, decay=lr/epochs)修改为：<span class="hljs-keyword">from</span> keras.optimizers <span class="hljs-keyword">import</span> adam_v2opt = adam_v2.Adam(lr=lr, decay=lr/epochs)</code></pre></div></li><li class="lvl-3"><p>问题二：待更新</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>智能车</category>
      
    </categories>
    
    
    <tags>
      
      <tag>智能车比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10版本转换激活</title>
    <link href="/2021/08/22/win10%E7%89%88%E6%9C%AC%E8%BD%AC%E6%8D%A2%E6%BF%80%E6%B4%BB/"/>
    <url>/2021/08/22/win10%E7%89%88%E6%9C%AC%E8%BD%AC%E6%8D%A2%E6%BF%80%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<h1>笔记本win10版本转换以及激活</h1><p>本篇文章介绍笔记本win10版本转换以及激活方法</p><span id="more"></span><h3 id="工具准备">工具准备</h3><ul class="lvl-0"><li class="lvl-2"><p>win10版本转换工具</p><p><img src="/img/mdimg/%E7%89%88%E6%9C%AC%E8%BD%AC%E6%8D%A2.png" alt=""></p></li><li class="lvl-2"><p>win10激活工具</p><p><img src="/img/mdimg/%E6%BF%80%E6%B4%BB.png" alt=""></p></li></ul><p>资源待更新，解压压缩包后得到两个文件夹，其中版本一键转换文件夹里面就是版本转换工具，另一文件夹则是激活工具。</p><h3 id="工具准备好后就可以开始进行版本转换了">工具准备好后就可以开始进行版本转换了</h3><p>本文基于联想拯救者R7000P 2020 win10家庭中文版进行演示</p><ul class="lvl-0"><li class="lvl-2"><p>打开版本一键转换软件</p><p><img src="/img/mdimg/%E7%89%88%E6%9C%AC%E8%BD%AC%E6%8D%A2.png" alt=""></p></li><li class="lvl-2"><p>如图所示，点击可以选择转换的版本，下面选项默认即可，点击开始转换，等待转换成功即可</p></li><li class="lvl-2"><p>等待提示版本转换成功后，进入另一文件夹，再进入All-In-One-Version文件夹，右键点击 MAS_1.4_AIO_CRC32_9A7B5B05.cmd 文件，选择以管理员身份运行</p></li><li class="lvl-2"><p><img src="/img/mdimg/%E6%BF%80%E6%B4%BB.png" alt=""></p></li><li class="lvl-2"><p>运行结果如图所示，键盘输入 2 来激活win10版本，其中[2],[3],[4]是三种激活方法，默认选择方法[2]即可，输入2后等待程序运行，当出现[successful]时代表激活成功，恭喜你，win10版本转换激活成功。</p></li></ul><p>进入设置里面可任意查看版本已经转换成功，本教程结束</p>]]></content>
    
    
    <categories>
      
      <category>win10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>win10</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
